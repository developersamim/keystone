@page "/verifyemail"
@layout EmptyLayout

@using FluentValidation
@using clientapp.Infrastructure.Contracts
@using common.shared

@inject NavigationManager NavigationManager

<PageTitle>KS</PageTitle>

<MudGrid Justify="Justify.Center" Style="padding-top: 40px">
    <MudItem xs="12" sm="4">
        
        <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Check your email</MudText>

        <MudForm Model="@verifyEmailModel" @ref="@form" Validation="@(verifyEmailValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudText Align="Align.Center">We have sent you a code.</MudText>
                <MudText Align="Align.Center" Style="margin-bottom: 20px">Please check your inbox at @emailAddress</MudText>
                <MudTextField @bind-Value="verifyEmailModel.Code" Immediate="true" Label="Enter Code" For="@(() => verifyEmailModel.Code)" Style="padding-top:20px" />
            </MudCardContent>
        </MudForm>

        <MudCardActions>
            <MudButton Disabled="@(processing || !form.IsTouched || !form.IsValid)" OnClick="@(async () => await Submit())" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send" FullWidth="true">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Verify</MudText>
                }
            </MudButton>
        </MudCardActions>

        <div style="padding: 0 8px;">
            <MudButton Variant="Variant.Outlined" FullWidth="true" OnClick="@(async () => await SendVerifyEmailCode())">
                @if (processingSendVerifyEmailCode)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Resend Code</MudText>
                }
            </MudButton>
        </div>

        <MudStack Style="margin-top: 30px">
            <MudLink Href="/" Align="center">Back to Home</MudLink>
        </MudStack>

    </MudItem>
</MudGrid>

@*</MudContainer>*@




@code {
    [CascadingParameter] protected Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] IVerifyEmailService? verifyEmailService { get; set; }
    private VerifyEmailModel verifyEmailModel { get; set; } = new VerifyEmailModel();
    private VerifyEmailModelFluentValidator verifyEmailValidator = new VerifyEmailModelFluentValidator();
    private string? emailAddress { get; set; }
    private bool processing = false;
    private bool processingSendVerifyEmailCode = false;

    MudForm? form;

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthenticationStateTask).User;
        var claims = user.Claims;

        if (user.Identity.IsAuthenticated)
        {
            @*var isVerified = claims.FirstOrDefault(x => x.Type == "email_verified")?.Value;
            if (!bool.TryParse(claims.FirstOrDefault(x => x.Type == "email_verified").Value, out bool verifiedEmailClaim))
                verifiedEmailClaim = false;
            if (verifiedEmailClaim)
                NavigationManager.NavigateTo("/");*@

            emailAddress = claims.FirstOrDefault(x => x.Type == "email")?.Value;
        }
    }

    public class VerifyEmailModel
    {
        public string? Code { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();
        processing = !processing;

        var request = new CheckVerifyEmailCodeRequestDto { Code = verifyEmailModel.Code };
        var data = await verifyEmailService.CheckVerifyEmailCode(request);

        if(data.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Snackbar.Add("Your email address has been verified!", MudBlazor.Severity.Success);
        }

        //showLoader = !showLoader;
        processing = !processing;
    }

    public async Task SendVerifyEmailCode()
    {
        processingSendVerifyEmailCode = !processingSendVerifyEmailCode;

        var result = await verifyEmailService.SendVerifyEmailCode();
        if(result.StatusCode == System.Net.HttpStatusCode.NoContent || result.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Snackbar.Add("Please check your email and retrieve code for verification", MudBlazor.Severity.Info);
        }

        processingSendVerifyEmailCode = !processingSendVerifyEmailCode;

        form.Reset();
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="VerifyEmailModel"></typeparam>
    public class VerifyEmailModelFluentValidator : AbstractValidator<VerifyEmailModel>
    {
        public VerifyEmailModelFluentValidator()
        {
            RuleFor(x => x.Code)
                .NotEmpty()
                .Length(6, 6);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<VerifyEmailModel>.CreateWithOptions((VerifyEmailModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
