@page "/profile"
@using FluentValidation
@using System.Globalization
@using clientapp.Infrastructure.Contracts
@using clientapp.Models
@inject IUserService UserService
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@*<MudCard Style="box-shadow: 0 !important">*@
    <MudForm Model="@profileModel" @ref="@form" Validation="@(profileValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <div Style="text-align: center">
                <MudAvatar Image="images/toiletvisit.jpg" Size="Size.Large" Style="width: 100px; height: 100px"/>
                <MudText>@string.Concat(profileModel.FirstName, " ", profileModel.LastName)</MudText>
                <MudText Typo="Typo.body2">MEMBER SINCE SEPTEMBER 2021</MudText>
            </div>
            <MudTextField @bind-Value="profileModel.Email" Immediate="true" Label="Email Address" For="@(() => profileModel.Email)" Disabled="true" />
            <MudTextField @bind-Value="profileModel.FirstName" Immediate="true" Label="First Name" For="@(() => profileModel.FirstName)" />
            <MudTextField @bind-Value="profileModel.LastName" Immediate="true" Label="Last Name" For="@(() => profileModel.LastName)" />
            <MudDatePicker Label="Date of Birth" @bind-Date="profileModel.DateOfBirth" MinDate="DateTime.Now.AddYears(-100)" MaxDate="DateTime.Now" For="@(() => profileModel.DateOfBirth)"/>
        </MudCardContent>
    </MudForm>

    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" disabled="@(!form.IsTouched)" OnClick="@(async () => await Submit())">Save</MudButton>
    </MudCardActions>
    
@*</MudCard>*@

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ProfileModel profileModel { get; set; } = new ProfileModel();
    MudForm form;
    bool success;
    [Inject] ISnackbar Snackbar { get; set; }

    ProfileModelFluentValidator profileValidator = new ProfileModelFluentValidator();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var claims = authState.User.Claims;

        if (user.Identity.IsAuthenticated)
        {
            Console.WriteLine($"{user.Identity.Name} is authenticated.");
            profileModel.Email = claims.FirstOrDefault(x => x.Type == "email").Value;
            profileModel.FirstName = claims.FirstOrDefault(x => x.Type == "given_name").Value;
            profileModel.LastName = claims.FirstOrDefault(x => x.Type == "family_name").Value;
            var dob = claims.FirstOrDefault(x => x.Type == "birthdate")?.Value;
            var parsedDate = DateTime.Parse(dob);
            profileModel.DateOfBirth = parsedDate;
        }
    }
    public class ProfileModel
    {
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime? DateOfBirth { get; set; } = new DateTime();
    }
    private async Task Submit()
    {
        await form.Validate();

        var userUpdateProfileDto = new UserUpdateProfileDto
        {
            GivenName = profileModel.FirstName,
            FamilyName = profileModel.LastName,
            BirthDate = profileModel.DateOfBirth
        };

        try
        {
            await UserService.UpdateProfile(userUpdateProfileDto);            

            Snackbar.Add("Submited!", MudBlazor.Severity.Success);
        }
        catch(Exception ex)
        {
            Snackbar.Add("Profile update unsuccessful!", MudBlazor.Severity.Error);
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="ProfileModel"></typeparam>
    public class ProfileModelFluentValidator : AbstractValidator<ProfileModel>
    {
        public ProfileModelFluentValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .Length(1, 100);
            RuleFor(x => x.FirstName)
                .NotEmpty()
                .Length(1,50);
            RuleFor(x => x.LastName)
                .NotEmpty()
                .Length(1, 50);
            RuleFor(x => x.DateOfBirth)
                .NotEmpty();
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ProfileModel>.CreateWithOptions((ProfileModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}