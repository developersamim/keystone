@page "/profile"
@using FluentValidation
@using System.Globalization
@using clientapp.Infrastructure.Contracts
@using clientapp.Models
@inject IUserService UserService
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

<MudGrid Justify="Justify.Center" Style="padding-top: 40px">
    <MudItem xs="12" sm="6" md="6">

        <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Profile</MudText>

        <MudForm Model="@profileModel" @ref="@form" Validation="@(profileValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <div Style="text-align: center">
                    <div class="container">
                        <MudAvatar Image="images/toiletvisit.jpg" Size="Size.Large" />
                        <MudLink Href="#"><MudIcon Icon="@Icons.Filled.CameraAlt" Class="camera" /></MudLink>
                    </div>

                    <MudText>@string.Concat(profileModel.FirstName, " ", profileModel.LastName)</MudText>
                    <MudText Typo="Typo.body2">MEMBER SINCE SEPTEMBER 2021</MudText>
                </div>
                <MudTextField @bind-Value="profileModel.Email" Immediate="true" Label="Email Address" For="@(() => profileModel.Email)" Disabled="true" />
                <MudTextField @bind-Value="profileModel.FirstName" Immediate="true" Label="First Name" For="@(() => profileModel.FirstName)" />
                <MudTextField @bind-Value="profileModel.LastName" Immediate="true" Label="Last Name" For="@(() => profileModel.LastName)" />
                <MudDatePicker
                               Label="Date of Birth"
                               @bind-Date="profileModel.DateOfBirth"
                               MinDate="DateTime.Now.AddYears(-100)"
                               MaxDate="DateTime.Now"
                               For="@(() => profileModel.DateOfBirth)"
                               DisableToolbar="true"
                               />
            </MudCardContent>
        </MudForm>

        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       Disabled="@(processing || !form.IsTouched || !form.IsValid)"
                       OnClick="@(async () => await Submit())">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Save" Style="margin-right: 3px"/>
                    <MudText> Save</MudText>
                }
            </MudButton>
        </MudCardActions>

    </MudItem>
</MudGrid>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ProfileModel profileModel { get; set; } = new ProfileModel();
    MudForm form;
    private bool processing = false;
    bool success;
    [Inject] ISnackbar Snackbar { get; set; }

    ProfileModelFluentValidator profileValidator = new ProfileModelFluentValidator();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var claims = authState.User.Claims;

        if (user.Identity.IsAuthenticated)
        {
            Console.WriteLine($"{user.Identity.Name} is authenticated.");
            profileModel.Email = claims.FirstOrDefault(x => x.Type == "email").Value;
            profileModel.FirstName = claims.FirstOrDefault(x => x.Type == "given_name").Value;
            profileModel.LastName = claims.FirstOrDefault(x => x.Type == "family_name").Value;
            string? dob = claims.FirstOrDefault(x => x.Type == "birthdate")?.Value;

            if (!DateTime.TryParse(dob, out DateTime parsedDate))
                parsedDate = DateTime.MinValue;
            else
                profileModel.DateOfBirth = parsedDate;
        }
    }

    public class ProfileModel
    {
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime? DateOfBirth { get; set; }
    }
    private async Task Submit()
    {
        await form.Validate();

        processing = !processing;
        var userUpdateProfileDto = new UserUpdateProfileDto
        {
            GivenName = profileModel.FirstName,
            FamilyName = profileModel.LastName,
            BirthDate = profileModel.DateOfBirth
        };


        var data = await UserService.UpdateProfile(userUpdateProfileDto);

        if(data.StatusCode == System.Net.HttpStatusCode.NoContent)
            Snackbar.Add("Profile has been saved successfully!", MudBlazor.Severity.Success);

        processing = !processing;

    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="ProfileModel"></typeparam>
    public class ProfileModelFluentValidator : AbstractValidator<ProfileModel>
    {
        public ProfileModelFluentValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .Length(1, 100);
            RuleFor(x => x.FirstName)
                .NotEmpty()
                .Length(1,50);
            RuleFor(x => x.LastName)
                .NotEmpty()
                .Length(1, 50);
            RuleFor(x => x.DateOfBirth)
                .NotEmpty();
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ProfileModel>.CreateWithOptions((ProfileModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}