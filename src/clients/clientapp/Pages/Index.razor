@page "/"
@layout EmptyLayout
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager

<PageTitle>KS</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Connect with educational community</MudText>
    <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true" Style="font-size: 14px;">UniSalad is a student-only platform where you can connect with other students from the same university, ask questions, share advice and solve your everyday needs. The app is made up of 5 categories: Q & A, Buy & Sell, Lost & Found, Housing and Travel, for you to easily filter through to find exactly what you need whilst at university.</MudText>

    <div style="text-align: center; margin-top: 10px">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="BeginRegistration" Style="font-size: 16px; padding:15px 30px">Join<MudIcon Icon="@Icons.Filled.ArrowForward" Title="Start" /></MudButton>
    </div>
</MudContainer>




@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthState).User;
        var claims = user.Claims;

        if (user.Identity.IsAuthenticated)
        {
            var verifiedEmailClaim = false;
            var verifiedEmailClaimProperty = claims.FirstOrDefault(x => x.Type == "email_verified").Value;

            if (verifiedEmailClaimProperty.StartsWith("["))
            {
                var value1 = verifiedEmailClaimProperty.Split(",")[0].Remove(0, 2);
                var value = value1.Remove(value1.Length - 1, 1);
                Console.WriteLine($"value: {value}");
                if (!bool.TryParse(value, out verifiedEmailClaim))
                    verifiedEmailClaim = false;
            }
            else
            {
                if (!bool.TryParse(claims.FirstOrDefault(x => x.Type == "email_verified").Value, out verifiedEmailClaim))
                    verifiedEmailClaim = false;
            }


            Console.WriteLine($"Verified email claim: {verifiedEmailClaim}");

            if (!verifiedEmailClaim)
                NavigationManager.NavigateTo("/verifyemail");

            NavigationManager.NavigateTo("/home");
        }
    }
    private async Task BeginRegistration(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("authentication/login");
    }
}
