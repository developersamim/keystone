@page "/"
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager

<PageTitle>KS</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Connect with educational community</MudText>
    <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true" Style="font-size: 14px;">UniSalad is a student-only platform where you can connect with other students from the same university, ask questions, share advice and solve your everyday needs. The app is made up of 5 categories: Q & A, Buy & Sell, Lost & Found, Housing and Travel, for you to easily filter through to find exactly what you need whilst at university.</MudText>

    <div style="text-align: center; margin-top: 10px">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="BeginRegistration" Style="font-size: 16px; padding:15px 30px">Join<MudIcon Icon="@Icons.Filled.ArrowForward" Title="Start" /></MudButton>
    </div>
</MudContainer>




@code {
    private async Task BeginRegistration(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("authentication/login");
        //Navigation.NavigateTo("https://localhost:7001/account/login?returnUrl=https://localhost:4001");

        //var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        @*var returnUrl = NavigationManager.Uri;
             Console.WriteLine($"returnUrl: {returnUrl}");
             returnUrl = $"~/{returnUrl}user=student";
             Console.WriteLine($"returnUrl1: {returnUrl}");
             //returnUrl = Uri.EscapeDataString(returnUrl);
             NavigationManager.NavigateTo($"https://localhost:7001/account/register?returnUrl={returnUrl}",
            forceLoad: true);*@
    }

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    [Inject] IUserService userService { get; set; }
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        var claims = user.Claims;

        if (user.Identity.IsAuthenticated)
        {
            UserProfileDto userProfile = await userService.GetProfile();
            Console.WriteLine($"userProfile: {JsonSerializer.Serialize(userProfile)}");
            var a = claims.FirstOrDefault(x => x.Type == "email_verified").Value;
            Console.WriteLine($"a: {a}");
            if (!bool.TryParse(claims.FirstOrDefault(x => x.Type == "email_verified").Value, out bool verifiedEmailClaim))
                verifiedEmailClaim = false;
            Console.WriteLine($"Verified email claim: {verifiedEmailClaim}");


            Console.WriteLine($"Profile Verified email property: {userProfile.EmailVerified}");

            if (userProfile.EmailVerified)
                NavigationManager.NavigateTo("/landing");
            if (!userProfile.EmailVerified)
                NavigationManager.NavigateTo("/verifyemail");
            Console.WriteLine("3");
            //NavManager.NavigateTo("updateprofile");
        }
        else
        {
            Console.WriteLine("4");
        }
    }
}
