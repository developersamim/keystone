@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">

        <AuthorizeView>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </AuthorizeView>

        <MudText Typo="Typo.h5" Class="ml-3">KeyStone</MudText>
        <MudSpacer />

        <AuthorizeView>
            <MudMenu>
                <ActivatorContent>
                    <MudAvatar Image="images/toiletvisit.jpg" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/profile">Profile</MudMenuItem>
                    <MudMenuItem @onclick="BeginSignOut">Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </AuthorizeView>

    </MudAppBar>

    <AuthorizeView>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
    </AuthorizeView>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    [Inject] IUserService userService { get; set; }
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("authentication/logout");
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        var claims = user.Claims;

        if (user.Identity.IsAuthenticated)
        {
            UserProfileDto userProfile = await userService.GetProfile();
            Console.WriteLine($"userProfile: {JsonSerializer.Serialize(userProfile)}");
            var a = claims.FirstOrDefault(x => x.Type == "email_verified").Value;
            Console.WriteLine($"a: {a}");
            if (!bool.TryParse(claims.FirstOrDefault(x => x.Type == "email_verified").Value, out bool verifiedEmailClaim))
                verifiedEmailClaim = false;
            Console.WriteLine($"Verified email claim: {verifiedEmailClaim}");
            @*if (!verifiedEmailClaim)
                NavManager.NavigateTo("/verifyemail");*@

            Console.WriteLine($"Profile Verified email property: {userProfile.EmailVerified}");

            if (userProfile.EmailVerified)
                NavigationManager.NavigateTo("/landing");
            if (!userProfile.EmailVerified)
                NavigationManager.NavigateTo("/verifyemail");
            Console.WriteLine("1");
            //NavManager.NavigateTo("updateprofile");
        }
        else
        {
            Console.WriteLine("2");
        }
    }
}